
projekt01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000020a  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000621  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000242  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000079a  00000000  00000000  00000bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000777b  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000199  00000000  00000000  00008bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00008d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000004ca  00000000  00000000  00008dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	92 d0       	rcall	.+292    	; 0x1d8 <main>
  b4:	a8 c0       	rjmp	.+336    	; 0x206 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_LCD_OutNibble>:
// Funkcja wystawiaj¹ca pó³bajt na magistralê danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
  b8:	80 ff       	sbrs	r24, 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  bc:	94 9a       	sbi	0x12, 4	; 18
  be:	01 c0       	rjmp	.+2      	; 0xc2 <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  c0:	94 98       	cbi	0x12, 4	; 18

if(nibbleToWrite & 0x02)
  c2:	81 ff       	sbrs	r24, 1
  c4:	02 c0       	rjmp	.+4      	; 0xca <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  c6:	95 9a       	sbi	0x12, 5	; 18
  c8:	01 c0       	rjmp	.+2      	; 0xcc <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  ca:	95 98       	cbi	0x12, 5	; 18

if(nibbleToWrite & 0x04)
  cc:	82 ff       	sbrs	r24, 2
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  d0:	96 9a       	sbi	0x12, 6	; 18
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  d4:	96 98       	cbi	0x12, 6	; 18

if(nibbleToWrite & 0x08)
  d6:	83 ff       	sbrs	r24, 3
  d8:	02 c0       	rjmp	.+4      	; 0xde <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  da:	97 9a       	sbi	0x12, 7	; 18
  dc:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  de:	97 98       	cbi	0x12, 7	; 18
  e0:	08 95       	ret

000000e2 <_LCD_Write>:
//
// Funkcja zapisu bajtu do wyœwietacza (bez rozró¿nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  e2:	cf 93       	push	r28
  e4:	c8 2f       	mov	r28, r24
LCD_E_PORT |= LCD_E;
  e6:	da 9a       	sbi	0x1b, 2	; 27
_LCD_OutNibble(dataToWrite >> 4);
  e8:	82 95       	swap	r24
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	e5 df       	rcall	.-54     	; 0xb8 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  ee:	da 98       	cbi	0x1b, 2	; 27
LCD_E_PORT |= LCD_E;
  f0:	da 9a       	sbi	0x1b, 2	; 27
_LCD_OutNibble(dataToWrite);
  f2:	8c 2f       	mov	r24, r28
  f4:	e1 df       	rcall	.-62     	; 0xb8 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  f6:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f e9       	ldi	r18, 0x9F	; 159
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <_LCD_Write+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <_LCD_Write+0x26>
 108:	00 00       	nop
_delay_ms(500);
}
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
 10e:	d8 98       	cbi	0x1b, 0	; 27
_LCD_Write(commandToWrite);
 110:	e8 cf       	rjmp	.-48     	; 0xe2 <_LCD_Write>
 112:	08 95       	ret

00000114 <LCD_WriteData>:
// Funkcja zapisu danych do pamiêci wyœwietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
 114:	d8 9a       	sbi	0x1b, 0	; 27
_LCD_Write(dataToWrite);
 116:	e5 cf       	rjmp	.-54     	; 0xe2 <_LCD_Write>
 118:	08 95       	ret

0000011a <LCD_WriteText>:
//
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
while(*text)
 120:	88 81       	ld	r24, Y
 122:	88 23       	and	r24, r24
 124:	29 f0       	breq	.+10     	; 0x130 <LCD_WriteText+0x16>
 126:	21 96       	adiw	r28, 0x01	; 1
  LCD_WriteData(*text++);
 128:	f5 df       	rcall	.-22     	; 0x114 <LCD_WriteData>
// Funkcja wyœwietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
while(*text)
 12a:	89 91       	ld	r24, Y+
 12c:	81 11       	cpse	r24, r1
 12e:	fc cf       	rjmp	.-8      	; 0x128 <LCD_WriteText+0xe>
  LCD_WriteData(*text++);
}
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <LCD_GoTo>:
// Funkcja ustawienia wspó³rzêdnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 136:	90 e4       	ldi	r25, 0x40	; 64
 138:	69 9f       	mul	r22, r25
 13a:	80 0d       	add	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	80 68       	ori	r24, 0x80	; 128
 140:	e6 cf       	rjmp	.-52     	; 0x10e <LCD_WriteCommand>
 142:	08 95       	ret

00000144 <LCD_Clear>:
// Funkcja czyszczenia ekranu wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	e3 df       	rcall	.-58     	; 0x10e <LCD_WriteCommand>
 148:	83 ef       	ldi	r24, 0xF3	; 243
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Clear+0x8>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Clear+0xe>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <LCD_Home>:
// Funkcja przywrócenia pocz¹tkowych wspó³rzêdnych wyœwietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
LCD_WriteCommand(HD44780_HOME);
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	da df       	rcall	.-76     	; 0x10e <LCD_WriteCommand>
 15a:	83 ef       	ldi	r24, 0xF3	; 243
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_Home+0x8>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_Home+0xe>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 168:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 16a:	8c 9a       	sbi	0x11, 4	; 17
LCD_DB5_DIR |= LCD_DB5; //
 16c:	8d 9a       	sbi	0x11, 5	; 17
LCD_DB6_DIR |= LCD_DB6; //
 16e:	8e 9a       	sbi	0x11, 6	; 17
LCD_DB7_DIR |= LCD_DB7; //
 170:	8f 9a       	sbi	0x11, 7	; 17
LCD_E_DIR 	|= LCD_E;   //
 172:	d2 9a       	sbi	0x1a, 2	; 26
LCD_RS_DIR 	|= LCD_RS;  //
 174:	d0 9a       	sbi	0x1a, 0	; 26
 176:	85 ea       	ldi	r24, 0xA5	; 165
 178:	9e e0       	ldi	r25, 0x0E	; 14
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCD_Initalize+0x12>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <LCD_Initalize+0x18>
 180:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 182:	d8 98       	cbi	0x1b, 0	; 27
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 184:	da 98       	cbi	0x1b, 2	; 27
 186:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 188:	da 9a       	sbi	0x1b, 2	; 27
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	95 df       	rcall	.-214    	; 0xb8 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 18e:	da 98       	cbi	0x1b, 2	; 27
 190:	81 ee       	ldi	r24, 0xE1	; 225
 192:	94 e0       	ldi	r25, 0x04	; 4
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Initalize+0x2c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_Initalize+0x32>
 19a:	00 00       	nop
 19c:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 19e:	a1 f7       	brne	.-24     	; 0x188 <LCD_Initalize+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 1a0:	da 9a       	sbi	0x1b, 2	; 27
_LCD_OutNibble(0x02); // tryb 4-bitowy
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	89 df       	rcall	.-238    	; 0xb8 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 1a6:	da 98       	cbi	0x1b, 2	; 27
 1a8:	89 ef       	ldi	r24, 0xF9	; 249
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Initalize+0x44>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_Initalize+0x4a>
 1b2:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	ab df       	rcall	.-170    	; 0x10e <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 1b8:	88 e0       	ldi	r24, 0x08	; 8
 1ba:	a9 df       	rcall	.-174    	; 0x10e <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	a7 df       	rcall	.-178    	; 0x10e <LCD_WriteCommand>
 1c0:	83 ef       	ldi	r24, 0xF3	; 243
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_Initalize+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_Initalize+0x62>
 1ca:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	9f df       	rcall	.-194    	; 0x10e <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 1d0:	8c e0       	ldi	r24, 0x0C	; 12
 1d2:	9d df       	rcall	.-198    	; 0x10e <LCD_WriteCommand>
}
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <main>:
#define  TR_SPRE_TUBA_0 PORTC&=~(1<<PC1);
#define  TR_WENT_1 PORTC|=(1<<PC0);
#define  TR_WENT_0 PORTC&=~(1<<PC0);
int main(void)
{//petla glowna
	DDRE=0x3C; // port e jako wyjœcie 00111100
 1d8:	8c e3       	ldi	r24, 0x3C	; 60
 1da:	82 b9       	out	0x02, r24	; 2
	PORTE=0x3C;
 1dc:	83 b9       	out	0x03, r24	; 3
	DDRB=0xFD; 
 1de:	8d ef       	ldi	r24, 0xFD	; 253
 1e0:	87 bb       	out	0x17, r24	; 23
	PORTB=0xFD;
 1e2:	88 bb       	out	0x18, r24	; 24

	SK1_EN_1;
 1e4:	c3 9a       	sbi	0x18, 3	; 24
	SK1_DIR_1;
 1e6:	c2 9a       	sbi	0x18, 2	; 24
	SK2_EN_1;
 1e8:	1b 9a       	sbi	0x03, 3	; 3
	SK2_DIR_1;
 1ea:	1c 9a       	sbi	0x03, 4	; 3

				LCD_Initalize();
 1ec:	bd df       	rcall	.-134    	; 0x168 <LCD_Initalize>
				LCD_Clear();
 1ee:	aa df       	rcall	.-172    	; 0x144 <LCD_Clear>
				LCD_Home();
 1f0:	b2 df       	rcall	.-156    	; 0x156 <LCD_Home>
				LCD_WriteText("love");
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	91 df       	rcall	.-222    	; 0x11a <LCD_WriteText>
				LCD_GoTo(0,1);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	9c df       	rcall	.-200    	; 0x136 <LCD_GoTo>
				LCD_WriteText("love2");
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	8b df       	rcall	.-234    	; 0x11a <LCD_WriteText>
		_delay_us(300);
		SK1_STEP_0;
		SK2_STEP_0;*/


	}
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x2c>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
